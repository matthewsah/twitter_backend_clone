// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: feed.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getFeed = `-- name: GetFeed :many
SELECT tweets.user_id, tweets.content, tweets.created_at, users.username
FROM follows
LEFT JOIN tweets ON follows.user_to_follow_id = tweets.user_id
LEFT JOIN users ON follows.user_to_follow_id = users.id
WHERE follows.user_id = $1
ORDER BY tweets.created_at DESC
`

type GetFeedRow struct {
	UserID    uuid.NullUUID
	Content   sql.NullString
	CreatedAt sql.NullTime
	Username  sql.NullString
}

func (q *Queries) GetFeed(ctx context.Context, userID uuid.UUID) ([]GetFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedRow
	for rows.Next() {
		var i GetFeedRow
		if err := rows.Scan(
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
